{"version":3,"sources":["constants.ts","util/timeMethods.ts","components/StopWatch/StopWatch.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["noOp","Function","prototype","THEMES","light","className","query","dark","DEFAULT_THEME","PREFERRED_THEME","window","matchMedia","Object","values","reduce","cTheme","aTheme","matches","parseTime","milliseconds","Math","trunc","ONE_DAY","ONE_HOUR","ONE_MINUTE","ONE_SECOND","padSegments","timeSegments","map","seg","String","padStart","StopWatch","props","onReset","onStart","onPause","onLap","useState","startTime","setStartTime","stopTime","setStopTime","isRunning","setIsRunning","lapTimes","setLapTimes","timeReadout","useRef","displayTime","elapsedTime","current","days","hours","minutes","seconds","secondTenths","timeSegmentMarkup","innerHTML","join","data-testid","ref","onClick","clearInterval","Boolean","rightNow","Date","now","pauseWatch","newStartTime","intervalId","setInterval","startWatch","thisLapTime","id","time","slice","fromStart","newLapTimes","disabled","length","reverse","lap","i","key","filter","s","App","activeTheme","setActiveTheme","watchEvents","setWatchEvents","addWatchEvent","text","entries","theme","event","laps","eventText","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5951976.chunk.js","sourcesContent":["\r\nexport const noOp = Function.prototype\r\n\r\nexport type themeDef = {\r\n  className: string\r\n  query?: string\r\n}\r\n\r\nexport type themeMap = {\r\n  [key: string]: themeDef\r\n}\r\n\r\nexport const THEMES = {\r\n  light: { className: 'theme-light', query: '(prefers-color-scheme: light)' },\r\n  dark: { className: 'theme-dark', query:  '(prefers-color-scheme: dark)' },\r\n} as themeMap\r\n\r\nexport const DEFAULT_THEME = THEMES.light\r\n\r\n// doesn't listen live, for simplicity sake\r\nexport const PREFERRED_THEME = window?.matchMedia ? Object.values(THEMES).reduce(\r\n    (cTheme: themeDef, aTheme: themeDef) => (\r\n      aTheme.query && window.matchMedia(aTheme.query).matches ? aTheme : cTheme\r\n    ), DEFAULT_THEME) : DEFAULT_THEME\r\n\r\nexport const ONE_SECOND = 1000\r\nexport const ONE_MINUTE = ONE_SECOND * 60\r\nexport const ONE_HOUR = ONE_MINUTE * 60\r\nexport const ONE_DAY = ONE_HOUR * 24\r\nexport const ONE_YEAR = ONE_DAY * 365\r\n\r\nexport type StopWatchProps = {\r\n  onReset?: Function\r\n  onStart?: Function\r\n  onPause?: Function\r\n  onLap?: Function\r\n}\r\n\r\nexport type lapTime = {\r\n  id: number,\r\n  time: number,\r\n  fromStart: number\r\n}","import { ONE_DAY, ONE_HOUR, ONE_MINUTE, ONE_SECOND, ONE_YEAR } from '../constants'\r\n\r\nexport const parseTime = (milliseconds : number) : Array<number> => {\r\n  const days = Math.trunc((milliseconds % ONE_YEAR) / ONE_DAY)\r\n  const hours = Math.trunc((milliseconds % ONE_DAY) / ONE_HOUR)\r\n  const minutes = Math.trunc((milliseconds % ONE_HOUR) / ONE_MINUTE)\r\n  const seconds = Math.trunc((milliseconds % ONE_MINUTE) / ONE_SECOND)\r\n  const secondTenths = Math.trunc((milliseconds % ONE_SECOND) / 10)\r\n  \r\n  return [ days, hours, minutes, seconds, secondTenths ]\r\n}\r\n\r\nexport const padSegments = (timeSegments: Array<number>) : string[] => {\r\n  const [ days, hours, minutes, seconds, secondTenths ] = timeSegments.map(seg => seg ? String(seg).padStart(2, '0') : '')\r\n  return [ days, hours, minutes, seconds || '00', secondTenths || '00' ]\r\n}\r\n\r\n\r\n","import React, { useState, useRef, FunctionComponent } from 'react'\r\nimport { padSegments, parseTime } from '../../util/timeMethods'\r\nimport { lapTime, noOp, StopWatchProps } from '../../constants'\r\n\r\nimport './StopWatch.scss'\r\n\r\nconst StopWatch:FunctionComponent<StopWatchProps> = function(props) {\r\n  const { onReset = noOp, onStart = noOp, onPause = noOp, onLap = noOp} = props\r\n  const [ startTime, setStartTime ] = useState(0)\r\n  const [ stopTime, setStopTime ] = useState(0)\r\n  const [ isRunning, setIsRunning ] = useState(0)\r\n  const [ lapTimes, setLapTimes ] = useState([] as lapTime[])\r\n  const timeReadout = useRef<HTMLDivElement>(null)\r\n\r\n  const displayTime = (elapsedTime: number) : void => {\r\n    if (timeReadout.current) {\r\n      const [ days, hours, minutes, seconds, secondTenths ] = padSegments(parseTime(elapsedTime))\r\n\r\n      const timeSegmentMarkup = [\r\n        days && `<span class='days' >${days}</span>` ,\r\n        hours && `<span class='hours' >${hours}</span>`,\r\n        minutes && `<span class='minutes' >${minutes}</span>`,\r\n        `<span class='seconds' >${seconds}</span>`,\r\n        `<span class='second-tenths' >${secondTenths}</span>`,\r\n      ]\r\n      timeReadout.current.innerHTML = timeSegmentMarkup.join('')\r\n    }\r\n  }\r\n\r\n  const startWatch = () : void => {\r\n    const newStartTime = Date.now() - (stopTime - startTime)\r\n    const intervalId = window.setInterval(() => {\r\n      displayTime(Date.now() - newStartTime)\r\n    }, 10)\r\n\r\n    setStartTime(newStartTime)\r\n    setIsRunning(intervalId)\r\n\r\n    onStart(newStartTime)\r\n  }\r\n\r\n  const pauseWatch = () : void => {\r\n    const rightNow = Date.now()\r\n    const elapsedTime = rightNow - startTime\r\n\r\n    window.clearInterval(isRunning)\r\n\r\n    setStopTime(rightNow)\r\n    setIsRunning(0)\r\n\r\n    onPause(elapsedTime, lapTimes)\r\n  }\r\n\r\n  const handleToggleTime = () : void => {\r\n    if (Boolean(isRunning)) {\r\n      pauseWatch()\r\n    } else {\r\n      startWatch()\r\n    }\r\n  }\r\n\r\n  const handleReset = () : void => {\r\n    window.clearInterval(isRunning)\r\n    displayTime(0)\r\n    setIsRunning(0)\r\n    setStartTime(0)\r\n    setStopTime(0)\r\n    setLapTimes([])\r\n\r\n    onReset()\r\n  }\r\n\r\n  const handleLap = () : void => {\r\n    if (Boolean(isRunning)) {\r\n      const rightNow = Date.now()\r\n      const elapsedTime = rightNow - startTime\r\n      const lastLapEnd = lapTimes.slice(-1)[0]?.fromStart ?? 0\r\n      const thisLapTime = {\r\n        id: rightNow,\r\n        time: elapsedTime - lastLapEnd,\r\n        fromStart: elapsedTime\r\n      } as lapTime\r\n\r\n      const newLapTimes = [...lapTimes, thisLapTime]\r\n      setLapTimes(newLapTimes)\r\n      onLap(thisLapTime)\r\n    }\r\n  }\r\n\r\n  return <section className='stop-watch-component'>\r\n    <time className='time-display large-margin-top' data-testid='time-display'>\r\n      <div ref={timeReadout} >\r\n        <span className='seconds' >00</span>\r\n        <span className='second-tenths'>00</span>\r\n      </div>\r\n    </time>\r\n\r\n    <div className='watch-controls text-center large-padding-top'>\r\n      <button className='small on-foreground' onClick={handleReset}>reset</button>\r\n      <button\r\n        onClick={handleToggleTime}\r\n        className={`round on-foreground ${Boolean(isRunning) ? 'toggled' : ''}`}>\r\n        {Boolean(isRunning) ? <i className='fa fa-pause' /> : <i className='fa fa-play' />}\r\n        {Boolean(isRunning) ? <span className='sr-only'>pause</span> : <span className='sr-only'>play</span>}\r\n      </button>\r\n      <button className='small on-foreground' onClick={handleLap} disabled={!Boolean(isRunning)}>lap</button>\r\n    </div>\r\n\r\n    {lapTimes.length > 0 && <aside className='lap-times'>\r\n      <div>\r\n        <strong className='small-padding-bottom'>Lap times</strong>\r\n        <div data-testid='lap-records'>\r\n          {[...lapTimes].reverse()\r\n            .map(lap => [lap.id, parseTime(lap.time), parseTime(lap.fromStart)])\r\n            .map(([id, time, fromStart], i) => <div key={String(id)}>\r\n              #{String(lapTimes.length - i).padStart(2, '0')} -&nbsp;\r\n              <span>{padSegments(time as Array<number>).filter(s => s).join(':')}</span> -&nbsp;\r\n              <span>{padSegments(fromStart as Array<number>).filter(s => s).join(':')}</span>\r\n            </div>)\r\n          }\r\n        </div>\r\n      </div>\r\n    </aside>}\r\n\r\n  </section>\r\n}\r\n\r\nexport default StopWatch","import React, { useState } from 'react'\nimport StopWatch from './components/StopWatch'\nimport {lapTime, PREFERRED_THEME, THEMES} from './constants'\n\nimport './App.scss'\n\ntype watchEvent = {\n  id: number\n  text: string\n}\n\nfunction App() {\n  const [ activeTheme, setActiveTheme ] = useState(PREFERRED_THEME.className)\n  const [ watchEvents, setWatchEvents ] = useState([] as watchEvent[])\n\n  const addWatchEvent = (text: string) : void => {\n    setWatchEvents([ ...watchEvents, { id: Date.now(), text } ])\n  }\n\n  const handleStart = () => addWatchEvent('START')\n  const handleReset = () => addWatchEvent('RESET')\n  const handleLap = (lap: lapTime) => addWatchEvent(`LAP: ${ lap.time }ms`)\n  const handlePause = (stopTime: number, laps: lapTime[]) => {\n    const eventText = `PAUSE: ${ String(stopTime) }ms, ${ laps.length } laps`\n    addWatchEvent(eventText)\n  }\n\n  return (\n    <div className={`demo-app ${activeTheme}`}>\n      <header className='clear-fix'>\n        <h1 className='pull-left'>Stop watch demo</h1>\n        <div className='pull-right'>\n          {Object.entries(THEMES).map(([ key, theme ]) => (\n            <button\n              key={theme.className}\n              className={`${activeTheme === theme.className ? 'toggled' : ''}`}\n              onClick={() => setActiveTheme(theme.className)}>{key}</button>\n          ))}\n        </div>\n      </header>\n      <main>\n        <section className='event-section'>\n          <strong>Watch events</strong>\n          {watchEvents.map(event => <div key={event.id}>{event.text}</div>)}\n          {watchEvents.length > 0 && <button className='on-foreground' onClick={() => setWatchEvents([])} >clear</button>}\n        </section>\n        <section className='component-section'>\n          <StopWatch\n            onStart={handleStart}\n            onPause={handlePause}\n            onLap={handleLap}\n            onReset={handleReset}\n          />\n        </section>\n\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/base.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}