{"version":3,"sources":["constants.ts","util/timeUtils.ts","i18n/en.js","i18n/index.js","util/speechUtils.ts","components/StopWatch/StopWatch.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["noOp","Function","prototype","THEMES","light","className","query","dark","DEFAULT_THEME","PREFERRED_THEME","window","matchMedia","Object","values","reduce","cTheme","aTheme","matches","parseTime","milliseconds","Math","trunc","ONE_DAY","ONE_HOUR","ONE_MINUTE","ONE_SECOND","padSegments","timeSegments","map","seg","String","padStart","en","DEFAULT_LANGUAGE","supported","firstSupported","navigator","languages","language","userLanguage","find","lng","utter","text","speechSynthesis","thisUtterance","SpeechSynthesisUtterance","speak","supportsSpeechSynthesis","Boolean","StopWatch","props","onReset","onStart","onPause","onLap","useState","speakTime","setSpeakTime","startTime","setStartTime","stopTime","setStopTime","isRunning","setIsRunning","lapTimes","setLapTimes","displayTimeRef","useRef","readTimeRef","readLapRef","displayTime","elapsedTime","current","days","hours","minutes","seconds","secondTenths","timeSegmentMarkup","innerHTML","join","readTime","timeLanguage","timeToLanguage","readLap","lapLanguage","transText","lap","length","day","hour","minute","filter","ts","ref","aria-live","onClick","speechOff","speechOn","role","clearInterval","reset","rightNow","Date","now","pauseWatch","newStartTime","intervalId","setInterval","startWatch","pause","play","thisLapDuration","slice","fromStart","thisLapTime","id","time","disabled","reverse","i","key","s","App","activeTheme","setActiveTheme","watchEvents","setWatchEvents","addWatchEvent","entries","theme","event","laps","eventText","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bfc3c79.chunk.js","sourcesContent":["\r\nexport const noOp = Function.prototype\r\n\r\nexport type themeDef = {\r\n  className: string\r\n  query?: string\r\n}\r\n\r\nexport type themeMap = {\r\n  [key: string]: themeDef\r\n}\r\n\r\nexport const THEMES = {\r\n  light: { className: 'theme-light', query: '(prefers-color-scheme: light)' },\r\n  dark: { className: 'theme-dark', query:  '(prefers-color-scheme: dark)' },\r\n} as themeMap\r\n\r\nexport const DEFAULT_THEME = THEMES.light\r\n\r\n// doesn't listen live, for simplicity sake\r\nexport const PREFERRED_THEME = window?.matchMedia ? Object.values(THEMES).reduce(\r\n    (cTheme: themeDef, aTheme: themeDef) => (\r\n      aTheme.query && window.matchMedia(aTheme.query).matches ? aTheme : cTheme\r\n    ), DEFAULT_THEME) : DEFAULT_THEME\r\n\r\nexport const ONE_SECOND = 1000\r\nexport const ONE_MINUTE = ONE_SECOND * 60\r\nexport const ONE_HOUR = ONE_MINUTE * 60\r\nexport const ONE_DAY = ONE_HOUR * 24\r\nexport const ONE_YEAR = ONE_DAY * 365\r\n\r\nexport type StopWatchProps = {\r\n  onReset?: Function\r\n  onStart?: Function\r\n  onPause?: Function\r\n  onLap?: Function\r\n}\r\n\r\nexport type lapTime = {\r\n  id: number,\r\n  time: number,\r\n  fromStart: number\r\n}","import { ONE_DAY, ONE_HOUR, ONE_MINUTE, ONE_SECOND, ONE_YEAR } from '../constants'\r\n\r\nexport const parseTime = (milliseconds : number) : Array<number> => {\r\n  // split milliseconds into its constituent time segments\r\n  const days = Math.trunc((milliseconds % ONE_YEAR) / ONE_DAY)\r\n  const hours = Math.trunc((milliseconds % ONE_DAY) / ONE_HOUR)\r\n  const minutes = Math.trunc((milliseconds % ONE_HOUR) / ONE_MINUTE)\r\n  const seconds = Math.trunc((milliseconds % ONE_MINUTE) / ONE_SECOND)\r\n  const secondTenths = Math.trunc((milliseconds % ONE_SECOND) / 10)\r\n  \r\n  return [ days, hours, minutes, seconds, secondTenths ]\r\n}\r\n\r\nexport const padSegments = (timeSegments: Array<number>) : string[] => {\r\n  // always return values for seconds and second tenths\r\n  const [ days, hours, minutes, seconds, secondTenths ] = timeSegments.map(seg => seg ? String(seg).padStart(2, '0') : '')\r\n  return [ days, hours, minutes, seconds || '00', secondTenths || '00' ]\r\n}\r\n\r\n// TODO:  test these\r\n","const en = {\r\n  'play': 'play',\r\n  'pause': 'pause',\r\n  'reset': 'reset',\r\n  'lap': 'lap',\r\n  'lapTimes': 'Lap times',\r\n  'minute': 'minute',\r\n  'minutes': 'minutes',\r\n  'second': 'second',\r\n  'seconds': 'seconds',\r\n  'hour': 'hour',\r\n  'hours': 'hours',\r\n  'day': 'day',\r\n  'days': 'days',\r\n  'speechOn': 'turn on spoken time',\r\n  'speechOff': 'turn off spoken time',\r\n}\r\n\r\nexport default en\r\n","import en from './en'\r\n//import zh from './zh'\r\n//import ha from './ha'\r\n//import es from './es'\r\n//import ar from './ar'\r\n\r\nconst DEFAULT_LANGUAGE = en\r\nconst supported = {\r\n  en,\r\n  //zh,\r\n  //ha,\r\n  //es,\r\n  //ar,\r\n}\r\n\r\nconst languages = window.navigator.languages || [window.navigator.language || window.navigator.userLanguage]\r\n\r\nconst firstSupported = languages.find(lng => supported[lng])\r\n\r\nexport default supported?.[firstSupported] || DEFAULT_LANGUAGE\r\n","export const utter = (text: string) : void => {\r\n  // say a thing\r\n  if (window.speechSynthesis) {\r\n    const thisUtterance = new window.SpeechSynthesisUtterance()\r\n    thisUtterance.text = text\r\n    window.speechSynthesis.speak(thisUtterance)\r\n  }\r\n}\r\n\r\nexport const supportsSpeechSynthesis = Boolean(window.speechSynthesis)\r\n","import React, { useState, useRef, FunctionComponent } from 'react'\r\nimport { padSegments, parseTime } from '../../util/timeUtils'\r\nimport { lapTime, noOp, StopWatchProps } from '../../constants'\r\nimport transText from '../../i18n'\r\nimport { supportsSpeechSynthesis, utter } from '../../util/speechUtils'\r\n\r\nimport './StopWatch.scss'\r\n\r\nconst StopWatch:FunctionComponent<StopWatchProps> = function(props) {\r\n  const { onReset = noOp, onStart = noOp, onPause = noOp, onLap = noOp} = props\r\n  const [ speakTime, setSpeakTime ] = useState(false) // TODO make this a prop?\r\n  const [ startTime, setStartTime ] = useState(0)\r\n  const [ stopTime, setStopTime ] = useState(0)\r\n  const [ isRunning, setIsRunning ] = useState(0)\r\n  const [ lapTimes, setLapTimes ] = useState([] as lapTime[])\r\n  const displayTimeRef = useRef<HTMLDivElement>(null)\r\n  const readTimeRef = useRef<HTMLDivElement>(null)\r\n  const readLapRef = useRef<HTMLDivElement>(null)\r\n\r\n  const displayTime = (elapsedTime: number) : void => {\r\n    // convert milliseconds into time segment markup\r\n    // and push to the time display element\r\n\r\n    if (displayTimeRef.current) {\r\n      const [ days, hours, minutes, seconds, secondTenths ] = padSegments(parseTime(elapsedTime))\r\n\r\n      const timeSegmentMarkup = [\r\n        days && `<span class='days' >${days}</span>` ,\r\n        hours && `<span class='hours' >${hours}</span>`,\r\n        minutes && `<span class='minutes' >${minutes}</span>`,\r\n        `<span class='seconds' >${seconds}</span>`,\r\n        `<span class='second-tenths' >${secondTenths}</span>`,\r\n      ]\r\n      displayTimeRef.current.innerHTML = timeSegmentMarkup.join('')\r\n    }\r\n  }\r\n\r\n  const startWatch = () : void => {\r\n    // record the start time, and start an interval to display elapsed time\r\n\r\n    const newStartTime = Date.now() - (stopTime - startTime)\r\n    const intervalId = window.setInterval(() => {\r\n      displayTime(Date.now() - newStartTime)\r\n    }, 10)\r\n\r\n    setStartTime(newStartTime)\r\n    setIsRunning(intervalId)\r\n\r\n    onStart(newStartTime)\r\n  }\r\n\r\n  const pauseWatch = () : void => {\r\n    // record the stop time, and stop the interval.\r\n    // don't clear anything just yet so the user can\r\n    // resume the timer.\r\n\r\n    const rightNow = Date.now()\r\n    const elapsedTime = rightNow - startTime\r\n\r\n    window.clearInterval(isRunning)\r\n\r\n    setStopTime(rightNow)\r\n    setIsRunning(0)\r\n    displayTime(elapsedTime)\r\n    readTime(elapsedTime)\r\n\r\n    onPause(elapsedTime, lapTimes)\r\n  }\r\n\r\n  const handleToggleTime = () : void => {\r\n    if (Boolean(isRunning)) {\r\n      pauseWatch()\r\n    } else {\r\n      startWatch()\r\n    }\r\n  }\r\n\r\n  const handleReset = () : void => {\r\n    // clear everything\r\n\r\n    window.clearInterval(isRunning)\r\n    displayTime(0)\r\n    setIsRunning(0)\r\n    setStartTime(0)\r\n    setStopTime(0)\r\n    setLapTimes([])\r\n\r\n    onReset()\r\n  }\r\n\r\n  const handleLap = () : void => {\r\n    // record the time since the last lap (time), and the time\r\n    // since the timer first started (fromStart).\r\n\r\n    if (Boolean(isRunning)) {\r\n      const rightNow = Date.now()\r\n      const elapsedTime = rightNow - startTime\r\n      const lastLapEnd = lapTimes.slice(-1)[0]?.fromStart ?? 0\r\n      const thisLapDuration = elapsedTime - lastLapEnd\r\n      const thisLapTime = {\r\n        id: rightNow,\r\n        time: thisLapDuration,\r\n        fromStart: elapsedTime\r\n      } as lapTime\r\n\r\n      readLap(thisLapDuration)\r\n      setLapTimes([...lapTimes, thisLapTime])\r\n\r\n      onLap(thisLapTime)\r\n    }\r\n  }\r\n\r\n  const readTime = (elapsedTime : number) : void => {\r\n    // push the time to an aria-assertive element for screen readers,\r\n    // and read it allowed if the setting is true and speech synthesis\r\n    // is support\r\n\r\n    const timeLanguage = timeToLanguage(elapsedTime)\r\n    if (readTimeRef.current) {\r\n      readTimeRef.current.innerHTML = timeLanguage\r\n    }\r\n    if (speakTime && supportsSpeechSynthesis) { utter(timeLanguage) }\r\n  }\r\n\r\n  const readLap = (elapsedTime : number) : void => {\r\n    // push the lap time to an aria-assertive element for screen readers,\r\n    // and read it allowed if the setting is true and speech synthesis\r\n    // is support\r\n\r\n    const lapLanguage = `${transText.lap} ${lapTimes.length + 1}, ${timeToLanguage(elapsedTime)}`\r\n    if (readLapRef.current) {\r\n      readLapRef.current.innerHTML = lapLanguage\r\n    }\r\n    if (speakTime && supportsSpeechSynthesis) { utter(lapLanguage) }\r\n  }\r\n\r\n  const timeToLanguage = (elapsedTime : number) : string => {\r\n    // convert time in milliseconds to something that can be read aloud\r\n\r\n    const [ days, hours, minutes, seconds, secondTenths ] = parseTime(elapsedTime)\r\n    const daysLang = days ? `${days} ${days > 1 ? transText.days : transText.day}` : ''\r\n    const hoursLang = hours ? `${hours} ${hours > 1 ? transText.hours : transText.hour}` : ''\r\n    const minutesLang = minutes ? `${minutes} ${minutes > 1 ? transText.minutes : transText.minute}` : ''\r\n    const secondsLang = seconds || secondTenths ? `${seconds} point ${secondTenths}  ${transText.seconds}` : ''\r\n\r\n    return [daysLang, hoursLang, minutesLang, secondsLang].filter(ts => ts).join(', ')\r\n  }\r\n\r\n  return <section className='stop-watch-component'>\r\n    <div ref={readTimeRef} className='sr-only' aria-live='assertive'/>\r\n    <div ref={readLapRef} className='sr-only' aria-live='assertive'/>\r\n\r\n    {supportsSpeechSynthesis && <button\r\n      className='speak-toggle icon'\r\n      onClick={() => setSpeakTime(!speakTime)}>\r\n      {speakTime ? <i className='fa fa-volume-up' /> : <i className='fa fa-volume-off' />}\r\n      {speakTime && <span className='sr-only'>{transText.speechOff}</span>}\r\n      {!speakTime && <span className='sr-only'>{transText.speechOn}</span>}\r\n    </button>}\r\n\r\n    <time className='time-display x-large-padding-top' role='timer' >\r\n      <div ref={displayTimeRef} >\r\n        <span className='seconds' >00</span>\r\n        <span className='second-tenths' >00</span>\r\n      </div>\r\n    </time>\r\n\r\n    <div className='watch-controls text-center large-padding-top'>\r\n      <button className='small on-foreground' onClick={handleReset}>{transText.reset}</button>\r\n      <button\r\n        onClick={handleToggleTime}\r\n        className='round on-foreground'>\r\n        {Boolean(isRunning) ? <i className='fa fa-pause' /> : <i className='fa fa-play' />}\r\n        {Boolean(isRunning) ? <span className='sr-only'>{transText.pause}</span> : <span className='sr-only'>{transText.play}</span>}\r\n      </button>\r\n      <button className='small on-foreground' onClick={handleLap} disabled={!Boolean(isRunning)}>{transText.lap}</button>\r\n    </div>\r\n\r\n    {lapTimes.length > 0 && <aside className='lap-times'>\r\n      <div>\r\n        <strong className='small-padding-bottom'>{transText.lapTimes}</strong>\r\n        <ul>\r\n          {[...lapTimes].reverse()\r\n            .map(lap => [lap.id, parseTime(lap.time), parseTime(lap.fromStart)])\r\n            .map(([id, time, fromStart], i) => <li key={String(id)}>\r\n              #{String(lapTimes.length - i).padStart(2, '0')} -&nbsp;\r\n              <span>{padSegments(time as Array<number>).filter(s => s).join(':')}</span> -&nbsp;\r\n              <span>{padSegments(fromStart as Array<number>).filter(s => s).join(':')}</span>\r\n            </li>)\r\n          }\r\n        </ul>\r\n      </div>\r\n    </aside>}\r\n  </section>\r\n}\r\n\r\nexport default StopWatch\r\n","import React, { useState } from 'react'\nimport StopWatch from './components/StopWatch'\nimport {lapTime, PREFERRED_THEME, THEMES} from './constants'\n\nimport './App.scss'\n\ntype watchEvent = {\n  id: number\n  text: string\n}\n\nfunction App() {\n  const [ activeTheme, setActiveTheme ] = useState(PREFERRED_THEME.className)\n  const [ watchEvents, setWatchEvents ] = useState([] as watchEvent[])\n\n  const addWatchEvent = (text: string) : void => {\n    setWatchEvents([ ...watchEvents, { id: Date.now(), text } ])\n  }\n\n  const handleStart = () => addWatchEvent('START')\n  const handleReset = () => addWatchEvent('RESET')\n  const handleLap = (lap: lapTime) => addWatchEvent(`LAP: ${ lap.time }ms`)\n  const handlePause = (stopTime: number, laps: lapTime[]) => {\n    const eventText = `PAUSE: ${ String(stopTime) }ms, ${ laps.length } laps`\n    addWatchEvent(eventText)\n  }\n\n  return (\n    <div className={`demo-app ${activeTheme}`}>\n      <header className='clear-fix'>\n        <h1 className='pull-left'>Stop watch demo</h1>\n        <div className='pull-right'>\n          {Object.entries(THEMES).map(([ key, theme ]) => (\n            <button\n              key={theme.className}\n              className={`${activeTheme === theme.className ? 'toggled' : ''}`}\n              onClick={() => setActiveTheme(theme.className)}>{key}</button>\n          ))}\n        </div>\n      </header>\n      <main>\n        <section className='event-section'>\n          <strong>Watch events</strong>\n          {watchEvents.map(event => <div key={event.id}>{event.text}</div>)}\n          {watchEvents.length > 0 && <button className='on-foreground' onClick={() => setWatchEvents([])} >clear</button>}\n        </section>\n        <section className='component-section'>\n          <StopWatch\n            onStart={handleStart}\n            onPause={handlePause}\n            onLap={handleLap}\n            onReset={handleReset}\n          />\n        </section>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/base.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}